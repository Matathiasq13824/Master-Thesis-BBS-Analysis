// For RAM reason and limit, the signature were generated by batch of 2500 or 5000 signatures, each separated in different files
// As in the machine learning will only need a part of it (the proof and the id of the user),
// we can recover only these values and put them in a single large file

import { initializeWasm,  Presentation} from '@docknetwork/crypto-wasm-ts'

import * as path from "path";
import { parse } from 'csv-parse/sync';
import * as fs from "fs";

const createCsvWriter = require('csv-writer').createObjectCsvWriter;
initializeWasm().then(async () => {
    let headersProofs  = [{id: "id", title: "Personal Number"},{id: "data", title: "Proof"}]
    //recovery of the informations
    let folder_name = "run1_100"
    let csvFilePath = path.resolve(__dirname, "credsafe/"+folder_name);
    let output_name = path.resolve(__dirname, `credsafe/cleaned_values/cleanup_${folder_name}.csv`)
    let csvWriter  = createCsvWriter({
        path: output_name,
        header: headersProofs 
    });

    try{
        let length = fs.readdirSync(csvFilePath).length;
        console.log(length)
        for(let t = 0; t < length; t++){
            let rows_cleaned:any[] = [];
            console.log(`Cleaning ${csvFilePath}/identity_proofs_${t}.csv...`)
            const fileContent = fs.readFileSync(`${csvFilePath}/identity_proofs_${t}.csv`, { encoding: 'utf-8' });
            let result:string[][] = parse(fileContent, {delimiter: ',',}).slice(1);
            result.forEach((row) => {
                let presentation = Presentation.fromJSON(JSON.parse(row[3]));
                rows_cleaned.push({id:row[0], data:presentation.proof.bytes})
            })
            await csvWriter.writeRecords(rows_cleaned)
        }

        console.log("Success");
    } catch (error) {
        console.log("Failure: ", error);
    }
})